name: "Deploy Project"

on:
  push:
    branches: [main]

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      # - name: Install FortiClient VPN
      #   run: |
      #     # Install gpg key
      #     wget -O - https://repo.fortinet.com/repo/forticlient/7.4/ubuntu22/DEB-GPG-KEY | gpg --dearmor | sudo tee /usr/share/keyrings/repo.fortinet.com.gpg
      #     # Create the sources.list.d file
      #     echo "deb [arch=amd64 signed-by=/usr/share/keyrings/repo.fortinet.com.gpg] https://repo.fortinet.com/repo/forticlient/7.4/ubuntu22/ stable non-free" | sudo tee /etc/apt/sources.list.d/repo.fortinet.com.list
      #     # Update package lists
      #     sudo apt-get update
      #     # Install FortiClient
      #     sudo apt install -y forticlient
      #     # Install gnome-keyring
      #     sudo apt install -y gnome-keyring
      #     # Initialize and unlock the login keyring
      #     killall gnome-keyring-daemon || true
      #     echo -n "${{ secrets.SUDO_PASSWORD }}" | gnome-keyring-daemon --unlock

      - name: Forticlient VPN
        uses: horellana/openconnect@v1.0.1
        with:
          # vpn user
          VPN_USER: ${{ secrets.FORTI_VPN_USERNAME }}
          # vpn password
          VPN_PWD: ${{ secrets.FORTI_VPN_PASSWORD }}
          # vpn host
          VPN_HOST: vpn.iiitd.edu.in
          # vpn port
          VPN_PORT: 10443
          # vpn server certificate
          # VPN_SERVER_CERT: 
          
      # - name: Connect to VPN
      #   run: |
      #     # Go to the fortivpn directory
      #     cd /opt/forticlient
      #     # Create or edit the VPN configuration
      #     echo -e "${{ secrets.FORTI_VPN_PASSWORD }}\n${{ secrets.FORTI_VPN_PASSWORD }}" | ./fortivpn edit IIITD --server vpn.iiitd.edu.in --port 10443 --user ${{ secrets.FORTI_VPN_USERNAME }} --password
      #     # Connect to the VPN
      #     ./fortivpn connect IIITD --user=${{ secrets.FORTI_VPN_USERNAME }} --password --save-password --always-up

      - name: Test SSH Connection (Debug Only)
        run: |
          ssh ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }} -T  # Test connection only

      - name: Setup SSH key
        uses: actions/upload-artifact@v3
        with:
          name: ssh-key
          path: ${{ secrets.SSH_KEY_DIR }}
          
      - name: Set up SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_KEY_DIR }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan ${{ secrets.SERVER_IP }} >> ~/.ssh/known_hosts
          cat ~/.ssh/id_rsa  # Debugging step to check the SSH key
          ls -la ~/.ssh      # Debugging step to check permissions

      - name: Sync Code to Server
        run: |
          rsync -avz --exclude '.git' ./ ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }}:/home/iiitd/phd-portal/IP-PhD-Management-Portal

      - name: Set up Backend
        run: |
          ssh ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }} << 'EOF'
          cd /home/iiitd/phd-portal/IP-PhD-Management-Portal/backend
          if [ ! -d "venv" ]; then
            python3 -m venv venv
          fi
          source venv/bin/activate
          pip install -r requirements.txt
          deactivate
          echo ${{ secrets.SUDO_PASSWORD }} | sudo -S systemctl restart gunicorn
          EOF

      - name: Set up Frontend
        run: |
          ssh ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }} << 'EOF'
          cd /home/iiitd/phd-portal/IP-PhD-Management-Portal/frontend
          npm install
          export NODE_ENV=production
          npm run build
          echo ${{ secrets.SUDO_PASSWORD }} | sudo -S systemctl restart nginx
          EOF
